import os
import os.path
import sys
sys.path += ["../../build"]
import global_config
from   global_config import LIBUTIL
from   global_config import LIBECL
from   global_config import add_static_library
from   global_config import add_shared_library
from   global_config import add_header
from   global_config import get_target


def needs_update( target_file , src_file):
    if not os.path.exists( target_file ):
       return True
       
    src_stat    = os.stat( src_file )
    target_stat = os.stat( target_file )

    if src_stat[8] > target_stat[8]:
        return True
    else:
        return False
    

vector_list = ["int" , "float" , "double" , "bool" , "time_t" , "long" , "size_t"]

src_list = Split("rng.c lookup_table.c statistics.c mzran.c set.c hash_node.c hash_sll.c hash.c list_node.c list.c node_data.c node_ctype.c util.c thread_pool.c msg.c arg_pack.c path_fmt.c menu.c subst_list.c subst_func.c vector.c parser.c stringlist.c matrix.c matrix_lapack.c matrix_blas.c buffer.c block_fs.c log.c template.c lars.c timer.c regression.c stepwise.c")

header_list = Split("rng.h lookup_table.h statistics.h mzran.h set.h hash.h hash_node.h hash_sll.h list_node.h list.h node_data.h node_ctype.h util.h thread_pool.h msg.h arg_pack.h path_fmt.h  stringlist.h menu.h subst_list.h subst_func.h vector.h parser.h matrix.h matrix_lapack.h matrix_blas.h buffer.h block_fs.h log.h template.h timer.h lars.h regression.h stepwise.h")

for type in vector_list:
    header_file = "%s_vector.h" % type
    src_file    = "%s_vector.c" % type
    if needs_update( header_file , "vector_template.h"):
        os.system("sed -e \'s/<TYPE>/%s/g\' vector_template.h > %s" % ( type , header_file))
    
    if needs_update( src_file , "vector_template.c"):
        os.system("sed -e \'s/<TYPE>/%s/g\' vector_template.c > %s" % ( type , src_file ))

    header_list.append( header_file )
    src_list.append( src_file )

#################################################################
package      = "util"
lib_path     = "../lib"
slib_path     = "../slib"
include_path = "../include"
bin_path     = "../bin"  
define_fmt   = "\'%s=\"%s\"\'"

conf     = global_config.get_conf(os.getcwd() , package , 2)
env      = Environment()
conf.update_env( env , [ LIBECL , LIBUTIL ] , link = False)

add_static_library( env , conf , lib_path , package , src_list )
add_shared_library( env , conf , slib_path , package , src_list)
add_header( env , conf , include_path , header_list )



Default( lib_path , slib_path , include_path )