from PyQt4 import QtGui, QtCore
from widgets.combochoice import ComboChoice
from widgets.stringbox import DoubleBox
from widgets.pathchooser import PathChooser


class FieldModel:
    type = "General"
    name = ""
    min = ""
    max = ""
    init = "None"
    output = "None"
    init_files = ""
    file_generated_by_enkf = ""
    file_loaded_by_enkf = ""

    def __init__(self, name):
        self.name = name


class FieldPanel(QtGui.QFrame):
    fieldModel = FieldModel("")

    def __init__(self, parent):
        QtGui.QFrame.__init__(self, parent)

        self.setFrameShape(QtGui.QFrame.StyledPanel)
        self.setFrameShadow(QtGui.QFrame.Plain)
        self.setSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Expanding)

        layout = QtGui.QFormLayout()
        layout.setLabelAlignment(QtCore.Qt.AlignRight)


        self.fieldType = ComboChoice(self, ["Dynamic", "Parameter", "General"], "", "param_type")
        self.fieldType.setter = lambda model, value: self.typeChanged(value)
        self.fieldType.getter = lambda model: self.fieldModel.type

        self.min = DoubleBox(self, "", "param_min")
        self.min.setter = lambda model, value: setattr(self.fieldModel, "min", value)
        self.min.getter = lambda model: self.fieldModel.min


        self.max = DoubleBox(self, "", "param_max")
        self.max.setter = lambda model, value: setattr(self.fieldModel, "max", value)
        self.max.getter = lambda model: self.fieldModel.max


        self.init = ComboChoice(self, ["None", "EXP", "LOG", "POW10", "ADD", "MUL", "RANDINT", "RANDFLOAT"], "", "param_init")
        self.init.setter = lambda model, value: setattr(self.fieldModel, "init", value)
        self.init.getter = lambda model: self.fieldModel.init

        self.output = ComboChoice(self, ["None", "EXP", "LOG", "POW10", "ADD", "MUL", "RANDINT", "RANDFLOAT"], "", "param_output")
        self.output.setter = lambda model, value: setattr(self.fieldModel, "output", value)
        self.output.getter = lambda model: self.fieldModel.output

        self.init_files = PathChooser(self, "", "param_init_files", True)
        self.init_files.setter = lambda model, value: setattr(self.fieldModel, "init_files", value)
        self.init_files.getter = lambda model: self.fieldModel.init_files

        self.file_generated_by_enkf = PathChooser(self, "", "param_file_generated_by_enkf", True)
        self.file_generated_by_enkf.setter = lambda model, value: setattr(self.fieldModel, "file_generated_by_enkf", value)
        self.file_generated_by_enkf.getter = lambda model: self.fieldModel.file_generated_by_enkf

        self.file_loaded_by_enkf = PathChooser(self, "", "param_file_loaded_by_enkf", True)
        self.file_loaded_by_enkf.setter = lambda model, value: setattr(self.fieldModel, "file_loaded_by_enkf", value)
        self.file_loaded_by_enkf.getter = lambda model: self.fieldModel.file_loaded_by_enkf

        layout.addRow("Field type:", self.fieldType)
        layout.addRow("Include file:", self.file_generated_by_enkf) # generated by ERT
        layout.addRow("Init files:", self.init_files)
        layout.addRow("Min:", self.min)
        layout.addRow("Max:", self.max)
        layout.addRow("Init transformation:", self.init)
        layout.addRow("Output transformation:", self.output)
        layout.addRow("File loaded by EnKF:", self.file_loaded_by_enkf)

        self.setLayout(layout)

        self.typeChanged("Dynamic")


    def typeChanged(self, value):
        setattr(self.fieldModel, "type", value)

        self.min.setEnabled(True)
        self.max.setEnabled(True)
        self.init.setEnabled(True)
        self.output.setEnabled(True)
        self.init_files.setEnabled(True)
        self.file_generated_by_enkf.setEnabled(True)
        self.file_loaded_by_enkf.setEnabled(True)

        if value == "Dynamic":
            self.init.setEnabled(False)
            self.output.setEnabled(False)
            self.init_files.setEnabled(False)
            self.file_generated_by_enkf.setEnabled(False)
            self.file_loaded_by_enkf.setEnabled(False)

        elif value == "Parameter":
            self.file_loaded_by_enkf.setEnabled(False)

    def setFieldModel(self, fieldModel):
        self.fieldModel = fieldModel

        self.fieldType.fetchContent()
        self.min.fetchContent()
        self.max.fetchContent()
        self.init.fetchContent()
        self.output.fetchContent()
        self.init_files.fetchContent()
        self.file_generated_by_enkf.fetchContent()
        self.file_loaded_by_enkf.fetchContent()
