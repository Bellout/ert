GEN_DATA (Det er ikke skille p GEN_DATA og GEN_PARAM - alt er GEN_DATA)
--------

1. Opprette en ny: ensemble_config_add_gen_data( ensemble_config , new_key );


2 Get:
     
    gen_data_config = enkf_config_node_get_ref( config_node );

    output_format   = gen_data_config_get_output_format( gen_data_config );    <- Returverdien her er en enum: gen_data_file_format_type, 
    input_format    = gen_data_config_get_input_format( gen_data_config );        definert i gen_data_config.h
    template_file   = gen_data_config_get_template_file( gen_data_config );
    template_key    = gen_data_config_get_template_key( gen_data_config );
    init_file_fmt   = gen_data_config_get_init_file_fmt( gen_data_config );
    .....
    enkf_config_node_get_enkf_outfile( config_node )  -> Include file (parameter/general)
    enkf_config_node_get_min_std_file( config_node )  -> Min. std.   (parameter/general)
    enkf_config_node_get_enkf_infile( config_node )   -> File loaded by EnKF (general)



3. Update:
    
    enkf_config_node_update_gen_data( config_node , input_format , output_format ,   /* Enum: gen_data_file_format_type */
                                      init_file_format , 
                                      template_file , 
                                      template_key , 
                                      enkf_outfile_fmt , 
                                      enkf_infile_fmt , 
                                      min_std_file );

    Legg merke til at det er ganske MAANGE innbyrdes krav mellom de
    forskjellige variablene som maa vaere tilfredsstilt; dette er
    "dokumentert" i funksjonene enkf_config_node_update_gen_data() og
    gen_data_config_update().





OBS_CONFIG:
----------

Get:
----
obs = enkf_main_get_obs( enkf_main );
enkf_obs_get_config_file( obs );


Set:
enkf_main_load_obs( enkf_main , obs_config_file );





KEEP_RUNPATH / DELETE_RUNPATH
-----------------------------

Denne variabelen er definert som en streng i tui - jeg foreslaar at du
heller bruker en tilsvarende tilnaerming som naar vi skal velge hvilke
realisasjoner som skal simuleres paa, hver av de smaa boksene skal ha
tre mulige verdier, tilsvarende enum keep_runpath_type i enkf_types.h.

Deretter:

enkf_main_iget_keep_runpath( enkf_main , index );
enkf_main_iset_keep_runpath( enkf_main , index , enum_value );




SCHEDULE_PREDICTION_FILE:
-------------------------

Get:
---
ecl_config = enkf_main_get_ecl_config( enkf_main )
schedule_prediction_file = ecl_config_get_schedule_prediction_file( ecl_config )


set:
---
enkf_main_set_schedule_prediction_file( enkf_main , "Filename")






forward_model:
--------------

get:
----
model_config   = enkf_main_get_model_config( enkf_main )
forward_model  = model_config_get_forward_model( model_config )
names          = forward_model_alloc_joblist( forward_model )     <- Allokerer en stringlist() med navnene på jobbene.



set
---
forward_model_clear( forward_model )

forward_model_add_job( forward_model , job_name );
forward_model_iset_job_arg( forward_model , job_nr , key , value); <- Set argument - observe that the jobs are identified with the index in
                                                                      the forward model, and not by name.     

more
----
s = enkf_main_get_site_config( enkf_main )
joblist = site_config_get_installed_jobs( s );
job_names = ext_joblist_alloc_list( joblist );  <- Stringlist



ext_joblist_get_job( joblist , ?NAME?)

ext_job = forward_model_iget_job( forward_model , job_nr )
arg_string = ext_job_get_private_args_as_string( ext_job );
ext_job_set_private_args_from_string( ext_job , "KEY1=Value1 , Key2=value2" )


ext_job_get_help_text( job );
