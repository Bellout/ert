Introduction
------------
Subversion is a revision control system, similar to CVS. Subversion
was built as an improved replacement for CVS, it is free software
available for anyone to download. The homepage is
http://subversion.tigris.org, here you can also find very good
documentation in the form of an (on-line) subversion book.

The 1.4 version of the svn program is installed in the directory
rooted at: /d/proj/bg/frs/subversion/subversion. To start using it you
should create links from your ~/bin directory, i.e. 

  bash% cd bin ; ln -s /d/proj/bg/frs/subversion/subversion/bin/* .

(Assuming you have a bin directory in your home)

Just typing svn should then produce:

  bash% svn
  Type 'svn help' for usage.

Repository
----------
All the information which is checked in to subversion is stored in a
repository, in our particular case the repository is located in:

   /d/proj/bg/frs/EnKF/repository

Internally all the revisions are stored in a database format, and one
should *not* make changes directly in the repository structure.


Initial checkout
----------------
Before you start using subversion you must 'check out' the sources. In
our case this will typically be done with the command:

   bash% svn co http://sdp.statoil.no/reservoir/EnKF/devel EnKF

Which will extract the directory starting with devel/ in the
repository, and make the same directory structure locally. In
addition to the files found in the repository, a directory ".svn" will
be added. The files & directories in .svn should not be modified
manually.

The files & directories which have been checked out, along with the
.svn directory, together constitute what is called a "working
copy". The working copy can be located at an arbitrary point in the
filesystem. 


Basic usage 
----------- 
The basic daily usage of the svn system will be something like this:

  1. Start by cd'ing to the path where your working copy is located.

  2. Update your working copy with:

       bash% svn update

     This will pull updated versions of the various files from the
     repository. If you have made changes to a file in (roughly) the
     same location as someone else, you must resolve the conflict
     manually by editing the file (and talking to your
     colleague). When the conflict has been resolved you must inform
     svn with the command

       bash% svn resolved filename

  3. Edit your files in the normal way.

  4. To add/move/copy/delete files use the commands

        bash% svn add filename
        bash% svn del filename
        bash% svn cp  filename
        bash% svn mv  filename

     To get a spesific version of one file you can do:

        bash% svn cat -r 150 filename

     this will dump version 150 of filename on stdout. If you messed
     up a file/drectory completely you can use 'svn revert' which will
     the original version from the repository again.


  5. When you are finished with your changes, check in the current
     state of your project with:

        bash% svn ci -m "I have done this and that ..."

     Instead of the -m option, you can supply the -F option and the
     name of a file which contains the update information. If neither
     -m nor -F is supplied, an editor is invoked.

     Observe that if someone else have checked in newer versions of
     the files you have updated you have to do a svn update, and
     possibly a manual merge, prior to checking in.

  6. The default working of svn is "copy-modify-merge" - but it is
     possible to lock files as well.

        bash% svn lock <filename> -m "I have locked <filename> - Joakim"

     When a file is locked other users can not check in updated
     versions of the file - they can nevertheless edit their own copy
     of it. The lock is released when the file is checked in.


Getting help
------------
For all commands you can type:

    bash% svn help <cmd>

to get help about the (sub)command 'cmd'. The subversion book at :
http://svnbook.red-bean.com is also very good. For moderately
difficult questions you can ask Joakim!





