


// Small utility function to convert an integer to
// a four character long string with zero prefix, 
// i.e. 16 -> "0016".

String FUNCTION make_cnum(Int num)
   String cnum
   Int d4 = Int(num / 1000)
   Int d3 = Int(num - d4 * 1000) / 100
   Int d2 = Int(num - d4 * 1000 - d3 * 100) / 10
   Int d1 = Int(num - d4 * 1000 - d3 * 100 - d2 * 10)

   cnum = d4
   cnum = cnum + d3
   cnum = cnum + d2
   cnum = cnum + d1
   return(cnum)
ENDFUNCTION



FUNCTION LoadField(Int zonenr , String path , String base , Int R1 , Int R2)
   Int i
   String file,cnum
   Zone   Z = @ZONES[zonenr]
   Parameter p   

   SetNumberOfRealizations(R2 - R1 + 1)

   FOR i FROM R1 to R2 DO
      cnum = make_cnum(i)  
      file = path + base + "_" + cnum + ".ROFF"
      Print("Loading from: ",file)
      SetCurrentRealization(i + 1 - R1)
      IF i = R1 THEN
         ImportRoffParameter(Z , file)
      	 SetShared(Z , base , FALSE)
      ELSE
         ImportRoffParameter(Z , file , p) 
	 SetParameter(Z , base , p)
      ENDIF
   ENDFOR

ENDFUNCTION



FUNCTION LoadStat(Int zonenr , String path , String base)
   Int i
   String file,cnum
   Zone   Z = @ZONES[zonenr]

   file = path + "AVE-" + base + ".ROFF"
   Print("Loading from: ",file)	
   ImportRoffParameter(Z , file)

   file = path + "STD-" + base + ".ROFF"
   Print("Loading from: ",file)	
   ImportRoffParameter(Z , file)
ENDFUNCTION


FUNCTION LoadParam(Int zonenr , String path , String base , Int R1 , Int R2)
   LoadField(zonenr , path , base , R1 , R2)
   LoadStat(zonenr , path , base )
ENDFUNCTION




// This code should be inserted in the RMS ipl window:
//
//Include("/h/a152128/EnKF/devel/EnKF/RMS/ipl/libipl.ipl")
//String PList[]
//PList[1] = "PERMX"
//PList[2] = "PRES"
//LoadAll(3 , "/h/a152128/EnKF_ON/Run-FMT-Test/tmp-Test" , PList,  1 , 25)


//The arguments to LoadAll are:
//
//1. zonenr - the zone number you want to load into.
//2. Path to where the RMS roff files are located; observe that to be platform
//   independent the libipl.ipl code does not append '/' (on Unix) or '\' (on Windows),
//   you therefor must call LoadAll *with* the trailing '/' or '\' - depending on
//   platform.
//3. A list of strings containing the names of the parameters you want to load.
//4. The number of the first realization to load.
//5. The number of the last realization to load.


FUNCTION LoadAll(Int zonenr , String path , String  PList[],  Int R1 , Int R2)
   Int ip
   FOR ip FROM 1 to PList.length DO
      LoadParam(zonenr , path , PList[ip] , R1 , R2)
   ENDFOR
ENDFUNCTION



