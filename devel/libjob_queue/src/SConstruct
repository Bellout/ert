import os
import os.path
import sys
sys.path += ["../../build"]
import global_config
from   global_config import LIBUTIL
from   global_config import LIBCONFIG
from   global_config import EXTERNAL

SDP_ROOT = ARGUMENTS.get('SDP_ROOT','/d/proj/bg/enkf')
if not os.path.exists( SDP_ROOT ):
   SDP_ROOT = None

conf = global_config.get_conf(SDP_ROOT , os.getcwd() , 2)
env  = Environment()
conf.update_env( env , [LIBCONFIG , LIBUTIL , EXTERNAL] )

src_list    = Split("forward_model.c job_queue.c basic_queue_driver.c lsf_driver.c local_driver.c rsh_driver.c ext_job.c ext_joblist.c lsf_request.c")
header_list = Split("job_queue.h basic_queue_driver.h lsf_driver.h local_driver.h rsh_driver.h ext_job.h ext_joblist.h lsf_request.h forward_model.h")

LIB = env.StaticLibrary("job_queue" , src_list , CPPDEFINES = ["\'USE_LSF_LIBRARY=TRUE\'"])
env.InstallLibrary("../lib" , LIB)
env.InstallHeader("../include"     , header_list)


##################################################################

install     = env.Alias('install',["../lib" , "../include"])

if SDP_ROOT:
   SDP_include = "%s/libjob_queue" % conf.SDP_INCLUDE
   env.InstallHeader(SDP_include , header_list)
   env.InstallLibrary(conf.SDP_LIB , LIB )
   SDP_INSTALL = env.Alias('SDP_INSTALL' , [conf.SDP_LIB , SDP_include])


Default( install )


